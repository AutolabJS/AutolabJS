- hosts: mainserver,executionnodes
  become: yes
  tasks:
    - raw: which python || apt-get update
    - raw: (which python && which aptitude) || apt-get install -y python python-apt aptitude

- hosts: mainserver,executionnodes
  become: yes
  tasks:
    - name: Install pip
      apt: name=python-pip update_cache=true
      when: ansible_distribution == 'Ubuntu'

    - name: Install docker-py
      pip: name=docker-py version=1.9.0

# Note: We assume main server has ssh open on port 2222
- hosts: mysql
  become: yes
  tasks:
    - name: Build MySQL Container
      docker_container:
        name: autolab-db
        image: "mysql:latest"
        detach: yes
        network_mode: host
        volumes:
          - "{{ sqldata }}:/var/lib/mysql"
          - "/etc/localtime:/etc/localtime:ro"
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_pass }}"

    - name: Transfer wait-for-it
      copy: src=wait-for-it.sh dest=/tmp/wait-for-it.sh mode=0777

    - name: Waiting for MySQL server to be up
      shell: ./wait-for-it.sh -t 60 {{ inventory_hostname}}:3306

    - pause: seconds=10

    - name: Create Autolab database
      command: docker exec autolab-db bash -c "mysql -u root -p{{ mysql_root_pass}} -e 'CREATE DATABASE Autolab'"

- hosts: gitlab
  become: yes
  tasks:
    - name: Build GitLab Container
      docker_container:
        name: gitlab
        image: "gitlab/gitlab-ce:latest"
        detach: yes
        hostname: gitlab.example.com
        env:
          GITLAB_ROOT_PASSWORD: "{{ gitlab_password }}"
          GITLAB_OMNIBUS_CONFIG: "external_url 'https://{{ inventory_hostname }}'; nginx['redirect_http_to_https'] = true;"
        published_ports:
          - "80:80"
          - "22:22"
          - "443:443"
        restart_policy: always
        volumes:
          - "/srv/gitlab/config:/etc/gitlab"
          - "/srv/gitlab/logs:/var/log/gitlab"
          - "/srv/gitlab/data:/var/opt/gitlab"

    ## TODO: Add support for generating keys on the fly
    - name: Copy the certificate
      shell: "{{ item }}"
      with_items:
        - "docker exec gitlab mkdir -p /etc/gitlab/ssl"
        - "docker cp ../gitlab/ssl/localhost.key gitlab:/etc/gitlab/ssl/{{ inventory_hostname }}.key"
        - "docker cp ../gitlab/ssl/localhost.crt gitlab:/etc/gitlab/ssl/{{ inventory_hostname }}.crt"

    #- name: Transfer wait-for-it to host
      #copy: src=wait-for-it.sh dest=/tmp/wait-for-it.sh mode=0777

    - name: Copy wait-for-it to container
      shell: docker cp wait-for-it.sh gitlab:/wait-for-it.sh

    - name: Waiting for Unicorn on GitLab server to be up
      shell: docker exec gitlab bash -c "/wait-for-it.sh -t 300 127.0.0.1:8080"

    - pause: seconds=60

    - name: Get Private Token
      uri:
        url: https://{{ inventory_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Create Test Project
      uri:
        url: https://{{ inventory_hostname }}/api/v3/projects
        method: POST
        status_code: 201
        body: "name=Test&private_token={{ session.private_token }}"
        validate_certs: no

- hosts: loadbalancer
  become: yes
  tasks:

    - name: Generate SSH Key for GitLab
      shell: "ssh-keygen -t rsa -C 'admin@javaautolab.com' -f keys/load_balancer/id_rsa -N ''"

    - name: Register public key
      shell: cat ./keys/load_balancer/id_rsa.pub
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ inventory_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "rootkey"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Build loadbalancer
      docker_image:
        name: load_balancer
        path: ../load_balancer

    - name: Start loadbalancer container
      docker_container:
        name: loadbalancer
        image: load_balancer
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "{{ submissions_dir }}:/load_balancer/submissions"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/load_balancer:/etc/load_balancer"
          - "./keys/load_balancer:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"

- hosts: mainserver
  become: yes
  tasks:
    - name: Generate SSH Key for GitLab
      shell: "ssh-keygen -t rsa -C 'admin@javaautolab.com' -f keys/main_server/id_rsa -N ''"

    - name: Register public key
      shell: cat ./keys/main_server/id_rsa.pub
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ inventory_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "rootkey"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Build mainserver
      docker_image:
        name: main_server
        path: ../main_server

    - name: Start mainserver container
      docker_container:
        name: mainserver
        image: main_server
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/main_server:/etc/main_server"

- hosts: executionnodes
  become: yes
  tasks:
    - name: mkdir for ssh keys
      shell: "mkdir -p {{ ansible_env.HOME}}/.autolab/keys/execution-node-{{ inventory_hostname }}-{{ port }}"

    - name: Generate SSH Key for GitLab
      shell: "ssh-keygen -t rsa -C 'admin@javaautolab.com' -f {{ ansible_env.HOME}}/.autolab/keys/execution-node-{{ inventory_hostname }}-{{ port }}/id_rsa -N ''"

    - name: Register public key
      shell: "cat {{ ansible_env.HOME}}/.autolab/keys/execution-node-{{ inventory_hostname }}-{{ port }}/id_rsa.pub"
      register: ssh_key
    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "rootkey"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Copy executionnode
      copy: "src=../execution_nodes dest={{ ansible_env.HOME}}/.autolab"

    - name: Change permission of docker-entrypoint
      file: "path={{ ansible_env.HOME}}/.autolab/execution_nodes/docker-entrypoint.sh mode=0755"

    - name: make config dir
      shell: "mkdir -p {{ ansible_env.HOME}}/.autolab/configs"

    - name: Copy configs
      copy: "src=./configs/execution_nodes dest={{ ansible_env.HOME}}/.autolab/configs"

    - name: Build executionnode
      docker_image:
        name: execution_node
        path: "{{ ansible_env.HOME}}/.autolab/execution_nodes"

    - name: Start execution_node container
      docker_container:
        name: "execution-node-{{ inventory_hostname }}-{{ port }}"
        image: execution_node
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "/etc/localtime:/etc/localtime:ro"
          - "{{ ansible_env.HOME}}/.autolab/configs/execution_nodes:/etc/execution_node"
          - "{{ ansible_env.HOME}}/.autolab/keys/execution-node-{{ inventory_hostname }}-{{ port }}:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"
