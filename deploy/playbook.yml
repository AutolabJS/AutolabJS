- hosts: mainserver,executionnodes
  become: yes
  tasks:
    - raw: which python || apt-get update
    - raw: (which python && which aptitude) || apt-get install -y python python-apt aptitude

- hosts: mainserver,executionnodes
  become: yes
  tasks:
    - name: Install pip
      apt: name=python-pip update_cache=true
      when: ansible_distribution == 'Ubuntu'

    - name: Install docker-py
      pip: name=docker-py version=1.9.0

# Note: We assume main server has ssh open on port 2222
- hosts: mysql
  become: yes
  tasks:
    - name: Build MySQL Container
      docker_container:
        name: autolab-db
        image: "mysql:latest"
        detach: yes
        network_mode: host
        volumes:
          - "{{ sqldata }}:/var/lib/mysql"
          - "/etc/localtime:/etc/localtime:ro"
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_pass }}"

    - name: Transfer wait-for-it
      copy: src=wait-for-it.sh dest=/tmp/wait-for-it.sh mode=0777

    - name: Waiting for MySQL server to be up
      shell: ./wait-for-it.sh -t 60 {{ inventory_hostname}}:3306

    - pause: seconds=10

    - name: Create Autolab database
      command: docker exec autolab-db bash -c "mysql -u root -p{{ mysql_root_pass}} -e 'CREATE DATABASE Autolab'"

- hosts: gitlab
  become: yes
  tasks:
    - name: Build GitLab Container
      docker_container:
        name: gitlab
        image: "gitlab/gitlab-ce:latest"
        detach: yes
        hostname: gitlab.example.com
        env:
          GITLAB_ROOT_PASSWORD: "{{ gitlab_password }}"
          GITLAB_OMNIBUS_CONFIG: "external_url 'https://{{ inventory_hostname }}'; nginx['redirect_http_to_https'] = true;"
        published_ports:
          - "80:80"
          - "22:22"
          - "443:443"
        restart_policy: always
        volumes:
          - "/opt/autolabjs/gitlab/config:/etc/gitlab"
          - "/opt/autolabjs/gitlab/logs:/var/log/gitlab"
          - "/opt/autolabjs/gitlab/data:/var/opt/gitlab"
          - "./keys/gitlab/ssl:/etc/gitlab/ssl"

    - name: Copy wait-for-it to container
      shell: docker cp wait-for-it.sh gitlab:/wait-for-it.sh

    - name: Waiting for Unicorn on GitLab server to be up
      shell: docker exec gitlab bash -c "/wait-for-it.sh -t 300 127.0.0.1:8080"

    - pause: seconds=60

    - name: Get Private Token
      uri:
        url: https://{{ inventory_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Create Test Project
      uri:
        url: https://{{ inventory_hostname }}/api/v3/projects
        method: POST
        status_code: 201
        body: "name=Test&private_token={{ session.private_token }}"
        validate_certs: no

- hosts: loadbalancer
  become: yes
  tasks:
    - name: Register public key
      shell: cat ./keys/gitlab/load_balancer/id_rsa.pub
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ inventory_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "loadbalancer"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Build loadbalancer
      docker_image:
        name: load_balancer
        path: ../load_balancer

    - name: Start loadbalancer container
      docker_container:
        name: loadbalancer
        image: load_balancer
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "../load_balancer:/load_balancer"
          - "{{ submissions_dir }}:/load_balancer/submissions"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/load_balancer:/etc/load_balancer"
          - "./keys/gitlab/load_balancer:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"

- hosts: mainserver
  become: yes
  tasks:
    - name: Build mainserver
      docker_image:
        name: main_server
        path: ../main_server

    - name: Start mainserver container
      docker_container:
        name: mainserver
        image: main_server
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "../main_server:/main_server"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/main_server:/etc/main_server"

- hosts: executionnodes1
  become: yes
  tasks:
    - name: Get Docker installation script
      get_url:
        url: https://get.docker.com
        dest: "/opt/autolabjs/execution_nodes/docker.sh"
        mode: 0775

    - name: Install Docker
      shell: "/opt/autolabjs/execution_nodes/docker.sh"

    - name: Start docker
      service: name=docker state=started

    - name: Register public key
      shell: "cat ./keys/gitlab/execution_nodes/execution_node_1/id_rsa.pub"
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "execution-node-{{ inventory_hostname }}-{{ port_1 }}"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Build executionnode
      docker_image:
        name: execution_node
        path: "../execution_nodes/execution_node_1"

    - name: Start execution_node container 1
      docker_container:
        name: "execution-node-{{ inventory_hostname }}-{{ port_1 }}"
        image: execution_node
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "../execution_nodes/execution_node_1:/execution_nodes"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/execution_nodes/execution_node_1:/etc/execution_node"
          - "./keys/gitlab/execution_nodes/execution_node_1:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"

- hosts: executionnodes2
  become: yes
  tasks:

    - name: Get Docker installation script
      get_url:
        url: https://get.docker.com
        dest: "/opt/autolabjs/execution_nodes/docker.sh"
        mode: 0775

    - name: Install Docker
      shell: "/opt/autolabjs/execution_nodes/docker.sh"

    - name: Start docker
      service: name=docker state=started

    - name: Register public key
      shell: "cat ./keys/gitlab/execution_nodes/execution_node_2/id_rsa.pub"
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "execution-node-{{ inventory_hostname }}-{{ port_2 }}"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Start execution_node container 2
      docker_container:
        name: "execution-node-{{ inventory_hostname }}-{{ port_2 }}"
        image: execution_node
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "../execution_nodes/execution_node_2:/execution_nodes"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/execution_nodes/execution_node_2:/etc/execution_node"
          - "./keys/gitlab/execution_nodes/execution_node_2:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"

- hosts: executionnodes3
  become: yes
  tasks:

    - name: Get Docker installation script
      get_url:
        url: https://get.docker.com
        dest: "/opt/autolabjs/execution_nodes/docker.sh"
        mode: 0775

    - name: Install Docker
      shell: "/opt/autolabjs/execution_nodes/docker.sh"

    - name: Start docker
      service: name=docker state=started
    - name: Register public key
      shell: "cat ./keys/gitlab/execution_nodes/execution_node_3/id_rsa.pub"
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "execution-node-{{ inventory_hostname }}-{{ port_3 }}"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Start execution_node container 3
      docker_container:
        name: "execution-node-{{ inventory_hostname }}-{{ port_3 }}"
        image: execution_node
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "../execution_nodes/execution_node_3:/execution_nodes"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/execution_nodes/execution_node_3:/etc/execution_node"
          - "./keys/gitlab/execution_nodes/execution_node_3:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"

- hosts: executionnodes4
  become: yes
  tasks:

    - name: Get Docker installation script
      get_url:
        url: https://get.docker.com
        dest: "/opt/autolabjs/execution_nodes/docker.sh"
        mode: 0775

    - name: Install Docker
      shell: "/opt/autolabjs/execution_nodes/docker.sh"

    - name: Start docker
      service: name=docker state=started

    - name: Register public key
      shell: "cat ./keys/gitlab/execution_nodes/execution_node_4/id_rsa.pub"
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "execution-node-{{ inventory_hostname }}-{{ port_4 }}"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Start execution_node container 4
      docker_container:
        name: "execution-node-{{ inventory_hostname }}-{{ port_4 }}"
        image: execution_node
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "../execution_nodes/execution_node_4:/execution_nodes"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/execution_nodes/execution_node_4:/etc/execution_node"
          - "./keys/gitlab/execution_nodes/execution_node_4:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"

- hosts: executionnodes5
  become: yes
  tasks:

    - name: Get Docker installation script
      get_url:
        url: https://get.docker.com
        dest: "/opt/autolabjs/execution_nodes/docker.sh"
        mode: 0775

    - name: Install Docker
      shell: "/opt/autolabjs/execution_nodes/docker.sh"

    - name: Start docker
      service: name=docker state=started

    - name: Register public key
      shell: "cat ./keys/gitlab/execution_nodes/execution_node_5/id_rsa.pub"
      register: ssh_key

    - name: Get Private Token
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/session
        status_code: 201
        method: POST
        body: "login=root&password={{ gitlab_password }}"
        validate_certs: no
        return_content: yes
      register: session_json

    - set_fact:
        session: "{{ session_json.content | from_json }}"

    - name: Add key to gitlab
      uri:
        url: https://{{ gitlab_hostname }}/api/v3/user/keys
        status_code: 201
        method: POST
        body_format: json
        HEADER_PRIVATE-TOKEN: "{{ session.private_token }}"
        body:
          title: "execution-node-{{ inventory_hostname }}-{{ port_5 }}"
          key: "{{ ssh_key.stdout }}"
        validate_certs: no
        return_content: yes

    - name: Start execution_node container 5
      docker_container:
        name: "execution-node-{{ inventory_hostname }}-{{ port_5 }}"
        image: execution_node
        network_mode: host
        detach: yes
        restart_policy: always
        volumes:
          - "../execution_nodes/execution_node_5:/execution_nodes"
          - "/etc/localtime:/etc/localtime:ro"
          - "./configs/execution_nodes/execution_node_5:/etc/execution_node"
          - "./keys/gitlab/execution_nodes/execution_node_5:/root/.ssh/"
        env:
          GITLAB_IP: "{{ gitlab_hostname }}"
